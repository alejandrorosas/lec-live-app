name: Label Check

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - labeled
      - unlabeled

env:
  COMMIT_STATUS_CONTEXT: Required Label Check

jobs:
  label-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Set status to pending
        uses: actions/github-script@v8
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: 'pending',
              description: 'Checking for required labels...',
              context: '${{ env.COMMIT_STATUS_CONTEXT }}',
            });

      - name: Remove semver labels from Dependabot PRs
        if: github.actor == 'dependabot[bot]'
        uses: actions/github-script@v8
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const semverLabels = ['major', 'minor', 'patch'];
            const prNumber = context.payload.pull_request.number;

            for (const label of semverLabels) {
              try {
                await github.rest.issues.removeLabel({
                  ...context.repo,
                  issue_number: prNumber,
                  name: label
                });
              } catch (_) {}
            }

      - name: Check for exactly one version label
        uses: actions/github-script@v8
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const validLabels = new Set(['major', 'minor', 'patch', 'dependencies', 'skip-changelog']);
            const prLabels = context.payload.pull_request.labels;

            const matchingLabels = prLabels.filter(label => validLabels.has(label.name));

            if (matchingLabels.length !== 1) {
              const description = `One of the following labels is required: ${[...validLabels].join(', ')}. Found ${matchingLabels.length}.`;
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.payload.pull_request.head.sha,
                state: 'failure',
                description: description,
                context: '${{ env.COMMIT_STATUS_CONTEXT }}',
                target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              });
              console.log(`Failure: ${description}`);
            } else {
              const labelName = matchingLabels[0].name;
              const description = `Found valid label: ${labelName}.`;
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.payload.pull_request.head.sha,
                state: 'success',
                description: description,
                context: '${{ env.COMMIT_STATUS_CONTEXT }}',
              });
              console.log(`Success: ${description}`);
            }


